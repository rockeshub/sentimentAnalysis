{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/http-error-handler.service.ts","webpack:///./src/app/http.service.ts","webpack:///./src/app/mat.module.ts","webpack:///./src/app/message.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"\\n<!-- <mat-grid-list cols=\\\"4\\\" rowHeight=\\\"200px\\\">\\n    <mat-grid-tile [colspan]=\\\"tiles.cols\\\" [rowspan]=\\\"tiles.rows\\\" [style.background]=\\\"tiles.color\\\">\\n    </mat-grid-tile>\\n    <mat-grid-tile [colspan]=\\\"mtiles.cols\\\" [rowspan]=\\\"mtiles.rows\\\" [style.background]=\\\"mtiles.color\\\">\\n        <mat-grid-tile-header>Hello</mat-grid-tile-header>\\n     </mat-grid-tile>\\n    <mat-grid-tile [colspan]=\\\"tiles.cols\\\" [rowspan]=\\\"tiles.rows\\\" [style.background]=\\\"tiles.color\\\">\\n    </mat-grid-tile>\\n  </mat-grid-list> -->\\n<mat-sidenav-container>\\n    <mat-toolbar>My App</mat-toolbar>\\n    <mat-sidenav-content> \\n      <div>\\n        <mat-tab-group>\\n          <mat-tab label=\\\"Analyse\\\"> <div style=\\\"padding-right: 75%;\\\">\\n              <mat-form-field appearance=\\\"outline\\\">\\n                <mat-label>Enter your Text Here</mat-label>\\n                <textarea matInput placeholder=\\\"Textarea\\\" #text></textarea>\\n              </mat-form-field>\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"analyse(text.value)\\\">Analyse the sentiment</button>\\n            <mat-icon matSuffix style=\\\"font-size: 1000% !important;\\\">{{resultEmoji.emoji}}</mat-icon>\\n             <span>score: {{result?.score}}</span>  \\n          </div>\\n          </mat-tab>\\n          <mat-tab label=\\\"Tokens\\\">\\n              <mat-list>\\n                  <mat-list-item *ngFor=\\\"let item of result?.tokens; let i = index\\\">\\n                    {{i}}] {{item}}\\n                    <mat-divider></mat-divider>\\n                  </mat-list-item>\\n                  \\n                </mat-list>\\n          </mat-tab>\\n        \\n          <mat-tab label=\\\"Negetive tokens\\\">\\n              <mat-list>\\n                  <mat-list-item *ngFor=\\\"let item of result?.negative; let i = index\\\">\\n                    {{i}}] {{item}}\\n                    <mat-divider></mat-divider>\\n                  </mat-list-item>\\n                  \\n                </mat-list>\\n          </mat-tab>\\n          <mat-tab label=\\\"Positive tokens\\\">\\n              <mat-list>\\n                  <mat-list-item *ngFor=\\\"let item of result?.positive; let i = index\\\">\\n                    {{i}}] {{item}}\\n                    <mat-divider></mat-divider>\\n                  </mat-list-item>\\n                  \\n                </mat-list>\\n          </mat-tab>\\n        </mat-tab-group></div>\\n    </mat-sidenav-content>\\n  </mat-sidenav-container>\"","import { Component } from '@angular/core';\nimport { HttpService } from './http.service';\nimport * as _ from 'lodash';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [HttpService]\n})\n\nexport class AppComponent {\n  title = 'app';\n  constructor(\n    private http: HttpService) {\n  }\n   resultEmoji: any = {\n    'score': -5,\n    'emoji': 'sentiment_very_dissatisfied',\n   };\n  emoji = [{\n    'score': -5,\n    'emoji': 'sentiment_very_dissatisfied',\n  },\n  {\n    'score': -4,\n    'emoji': 'sentiment_very_dissatisfied',\n  },\n  {\n    'score': -3,\n    'emoji': 'sentiment_very_dissatisfied',\n  },\n  {\n    'score': -2,\n    'emoji': 'sentiment_dissatisfied',\n  },\n  {\n    'score': -1,\n    'emoji': 'sentiment_dissatisfied',\n  },\n  {\n    'score': 5,\n    'emoji': 'sentiment_very_satisfied',\n  },\n  {\n    'score': 4,\n    'emoji': 'sentiment_very_satisfied',\n  },\n  {\n    'score': 3,\n    'emoji': 'sentiment_satisfied_alt',\n  },\n  {\n    'score': 2,\n    'emoji': 'sentiment_satisfied_alt',\n  },\n  {\n    'score': 1,\n    'emoji': 'sentiment_satisfied',\n  },\n  {\n    'score': 0,\n    'emoji': 'sentiment_satisfied',\n  }];\n    tiles = {text: 'One', cols: 1, rows: 2, color: 'white'};\n    mtiles = {text: 'One', cols: 2, rows: 2, color: 'white'};\n    result: Observable<any>;\n\n  analyse(text) {\n    const payload = {\n      'text': text\n    };\n    console.log('text', text);\n    this.http.addHero(payload).subscribe(\n      res => {\n        console.log('res', res);\n        this.result = res;\n        this.resultEmoji = _.find(this.emoji, { 'score': _.round(res.score) });\n      },\n      error => {\n        console.log('error', error);\n      },\n      () => {\n        console.log('completed');\n      }\n    );\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpClientXsrfModule } from '@angular/common/http';\nimport { AllMaterialModule } from './mat.module';\nimport { AppComponent } from './app.component';\nimport { HttpErrorHandler } from './http-error-handler.service';\nimport { MessageService } from './message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AllMaterialModule,\n    FormsModule,\n    HttpClientModule,\n    HttpClientXsrfModule\n  ],\n  providers: [HttpErrorHandler,\n    MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\n\nimport { MessageService } from './message.service';\n\n/** Type of the handleError function returned by HttpErrorHandler.createHandleError */\nexport type HandleError =\n  <T> (operation?: string, result?: T) => (error: HttpErrorResponse) => Observable<T>;\n\n/** Handles HttpClient errors */\n@Injectable()\nexport class HttpErrorHandler {\n  constructor(private messageService: MessageService) { }\n\n  /** Create curried handleError function that already knows the service name */\n  createHandleError = (serviceName = '') => <T>\n    (operation = 'operation', result = {} as T) => this.handleError(serviceName, operation, result);\n\n  /**\n   * Returns a function that handles Http operation failures.\n   * This error handler lets the app continue to run as if no error occurred.\n   * @param serviceName = name of the data service that attempted the operation\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError<T> (serviceName = '', operation = 'operation', result = {} as T) {\n\n    return (error: HttpErrorResponse): Observable<T> => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      const message = (error.error instanceof ErrorEvent) ?\n        error.error.message :\n       `server returned code ${error.status} with body \"${error.error}\"`;\n\n      // TODO: better job of transforming error for user consumption\n      this.messageService.add(`${serviceName}: ${operation} failed: ${message}`);\n\n      // Let the app keep running by returning a safe result.\n      return of( result );\n    };\n\n  }\n}\n\n\n/*\nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\n\n\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n\nimport { HttpErrorHandler, HandleError } from './http-error-handler.service';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json',\n    'Authorization': 'my-auth-token'\n  })\n};\n\n@Injectable()\nexport class HttpService {\n  heroesUrl = 'http://localhost:8000/sentiment';  // URL to web api\n  private handleError: HandleError;\n\n  constructor(\n    private http: HttpClient,\n    httpErrorHandler: HttpErrorHandler) {\n    this.handleError = httpErrorHandler.createHandleError('HeroesService');\n  }\n\n  /** GET heroes from the server */\n//   getHeroes (): Observable<Hero[]> {\n//     return this.http.get<Hero[]>(this.heroesUrl)\n//       .pipe(\n//         catchError(this.handleError('getHeroes', []))\n//       );\n//   }\n\n//   /* GET heroes whose name contains search term */\n//   searchHeroes(term: string): Observable<Hero[]> {\n//     term = term.trim();\n\n//     // Add safe, URL encoded search parameter if there is a search term\n//     const options = term ?\n//      { params: new HttpParams().set('name', term) } : {};\n\n//     return this.http.get<Hero[]>(this.heroesUrl, options)\n//       .pipe(\n//         catchError(this.handleError<Hero[]>('searchHeroes', []))\n//       );\n//   }\n\n  //////// Save methods //////////\n\n  /** POST: add a new hero to the database */\n  addHero (hero: any): Observable<any> {\n    return this.http.post(this.heroesUrl, hero, httpOptions)\n      .pipe(\n        catchError(this.handleError('addHero', hero))\n      );\n  }\n\n  /** DELETE: delete the hero from the server */\n//   deleteHero (id: number): Observable<{}> {\n//     const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n//     return this.http.delete(url, httpOptions)\n//       .pipe(\n//         catchError(this.handleError('deleteHero'))\n//       );\n//   }\n\n//   /** PUT: update the hero on the server. Returns the updated hero upon success. */\n//   updateHero (hero: Hero): Observable<Hero> {\n//     httpOptions.headers =\n//       httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n//     return this.http.put<Hero>(this.heroesUrl, hero, httpOptions)\n//       .pipe(\n//         catchError(this.handleError('updateHero', hero))\n//       );\n//   }\n}\n","import {NgModule} from '@angular/core';\n\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {\n  MatAutocompleteModule, MatBadgeModule, MatBottomSheetModule, MatButtonModule,\n  MatButtonToggleModule, MatCardModule, MatCheckboxModule, MatChipsModule, MatDatepickerModule,\n  MatDialogModule, MatDividerModule, MatExpansionModule, MatFormFieldModule, MatGridListModule,\n  MatIconModule, MatInputModule, MatListModule, MatMenuModule, MatPaginatorModule,\n  MatProgressBarModule, MatProgressSpinnerModule, MatRadioModule, MatRippleModule, MatSelectModule,\n  MatSidenavModule, MatSliderModule, MatSlideToggleModule, MatSnackBarModule, MatSortModule,\n  MatStepperModule, MatTableModule, MatTabsModule, MatToolbarModule, MatTooltipModule, MatTreeModule\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CdkTableModule,\n    CdkTreeModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSliderModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    ScrollDispatchModule,\n  ],\n  exports: [\n    A11yModule,\n    CdkTableModule,\n    CdkTreeModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSlideToggleModule,\n    MatSliderModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatStepperModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    ScrollDispatchModule,\n  ]\n})\nexport class AllMaterialModule { }\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n\n\n/*\nCopyright 2017-2018 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}